#!/usr/bin/env python
from __future__ import print_function
import argparse
import binascii
import time
import os
import sys
import btle
import urllib2

class ScanPrint(btle.DefaultDelegate):
    def __init__(self, opts):
        btle.DefaultDelegate.__init__(self)
        self.opts = opts

    def handleDiscovery(self, dev, isNewDev, isNewData):
          
#        print ('    Device: %s (%s), %d dBm %s' % 
#                  (dev.addr,
#                   dev.addrType,
#                   dev.rssi,
#                   ('' if dev.connectable else '(not connectable)') )
#              )

        if (dev.addr=="aa:aa:aa:aa:aa:aa"): # sensortag BT MAC

            merch = dev.getMerchantData()
#            print ('Received sensor reading: ' + merch)

            hum_tmp = int(merch[0:4], 16)
            temp_tmp = int(merch[4:8], 16)
            batt = int(merch[8:12], 16)
            cnt = int(merch[12:16], 16)

            hum = (float(hum_tmp)/65536)*100
            tmp = ((float(temp_tmp)/65536)*165) - 40

            baseURL2 = 'https://api.thingspeak.com/update?api_key=THINGSPEAKKEY'
            f2 = urllib2.urlopen(baseURL2 + 
                                "&field1={0:0.1f}&field4={1:0.1f}&field5={2:d}"
                                .format(tmp, hum, batt))
            f2.close()

#            print ('tmp=%.2f, hum=%.2f, batt=%d, count=%d' % (tmp, hum, batt, cnt))

def main():
    import logging
    from logging.handlers import SysLogHandler

    logger = logging.getLogger("MyLogger")
    logger.setLevel(logging.INFO)
    syslog = SysLogHandler(address='/dev/log')
    logger.addHandler(syslog)

    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--hci', action='store', type=int, default=0,
                        help='Interface number for scan')
    parser.add_argument('-t', '--timeout', action='store', type=int, default=4,
                        help='Scan time, 0 for continuous')
    parser.add_argument('-s', '--sensitivity', action='store', type=int, default=-128,
                        help='dBm value for filtering far devices')
    parser.add_argument('-v','--verbose', action='store_true',
                        help='Increase output verbosity')
    arg = parser.parse_args(sys.argv[1:])

    btle.Debugging = arg.verbose

    scanner = btle.Scanner(arg.hci).withDelegate(ScanPrint(arg))

#    print ("Scanning for devices...")
    logger.debug('Scanning for devices...')

    devices = scanner.scan(0)

if __name__ == "__main__":
    main()






